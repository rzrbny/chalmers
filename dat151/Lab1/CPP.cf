PDefs.    Program ::= [Def] ;

DFun.     Def     ::= Type Id "(" [Arg] ")" Bdy ;
DQual.    Def     ::= "using" Qual ";" ;
Dtype.    Def     ::= "typedef" Type Id ";" ;
DVar.     Def     ::= Var ";" ;

BBlock.   Bdy     ::= "{" [Stm] "}" ;
BEmpty.   Bdy     ::= ";" ;

ADef.     Arg     ::= ArgDec ;
AConsts.  Arg     ::= "const" ArgDec ;

AType.    ArgDec  ::= Type ;
AVar.     ArgDec  ::= Type VarDec ;

SExp.     Stm	  ::= Exp ";" ;
SDec.     Stm     ::= Var ";" ;
STypeDef. Stm     ::= "typedef" Type Id ";" ;
SWhile.   Stm     ::= "while" "(" Exp ")" Stm ;
SDoWhile. Stm     ::= "do" Stm "while" "(" Exp ")" ";" ;
--specification unclear, can there be multiple variabel declarations in for-loop
--SFor.     Stm     ::= "for" "(" Var ";" Exp ";" Exp ")" Stm ;
SFor.     Stm     ::= "for" "(" VarDec ";" Exp ";" Exp ")" Stm ;
SIf.      Stm     ::= "if" "(" Exp ")" Stm ;
SIfElse.  Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;
SRet.	  Stm	  ::= "return" Exp ";" ;
SBlock.   Stm     ::= "{" [Stm] "}" ;

VDef.     Var     ::= Type [VarDec] ;
VConst.   Var     ::= "const" Type [VarDec] ;

VDec.     VarDec  ::= Id ;
VAss.     VarDec  ::= Id "=" Exp ;

EInt.	  Exp16	  ::= Integer ;
EDouble.  Exp16	  ::= Double ;
EChar.    Exp16   ::= Char ;
EString.  Exp16   ::= [String] ;
EQual.	  Exp16	  ::= Qual ;
EInd.     Exp15   ::= Exp15 "[" Exp "]" ;
EFun.     Exp15   ::= Exp15 "(" [Exp] ")" ;
ECall.    Exp14   ::= Exp14 "." Exp15 ;
EProj.    Exp14   ::= Exp14 "->" Exp15 ;
EIncb.    Exp14   ::= Exp14 "++" ;
EDecb.    Exp14   ::= Exp14 "--" ;
EInc.     Exp13   ::= "++" Exp13 ;
EDec.     Exp13   ::= "--" Exp13 ;
EDer.     Exp13   ::= "*" Exp13 ;
ENeg.     Exp13   ::= "!" Exp13 ;
EMult.    Exp12   ::= Exp12 "*" Exp13 ;
EDiv.     Exp12   ::= Exp12 "/" Exp13 ;
ERem.     Exp12   ::= Exp12 "%" Exp13 ;
EAdd.     Exp11   ::= Exp11 "+" Exp12 ;
ESub.     Exp11   ::= Exp11 "-" Exp12 ;
ELShift.  Exp10   ::= Exp10 "<<" Exp11 ;
ERShift.  Exp10   ::= Exp10 ">>" Exp11 ;
ELe.      Exp9    ::= Exp9 "<" Exp10 ;
EGr.      Exp9    ::= Exp9 ">" Exp10 ;
ELeq.     Exp9    ::= Exp9 "<=" Exp10 ;
EGeq.     Exp9    ::= Exp9 ">=" Exp10 ;
EEq.      Exp8    ::= Exp8 "==" Exp9 ;
EIneq.    Exp8    ::= Exp8 "!=" Exp9 ;
EConj.    Exp4    ::= Exp4 "&&" Exp5 ;
EDisj.    Exp3    ::= Exp3 "||" Exp4 ;
EAss.     Exp2   ::= Exp3 "=" Exp2 ;
EAssAdd.  Exp2   ::= Exp3 "+=" Exp2 ;
EAssSub.  Exp2   ::= Exp3 "-=" Exp2 ;
ECond.    Exp2   ::= Exp3 "?" Exp ":" Exp2 ;
EExc.     Exp     ::= "throw" Exp ;
coercions Exp 16 ;

TInt.	  Type	  ::= "int" ;
TBool.    Type    ::= "bool" ;
TChar.    Type    ::= "char" ;
TDouble.  Type    ::= "double" ;
TVoid.    Type    ::= "void" ;
TQual.	  Type	  ::= Qual ;
-- space so it is not confused with conjunction &&
TRef.     Type    ::= Type " &" ;

QDef.     Qual	  ::= [Id] ;

DId.   	  Id 	  ::= CIdent ;
token CIdent (letter (letter | digit | '_')*) ;

terminator Def "" ;
separator Arg "," ;
separator Stm "" ;
separator nonempty VarDec "," ;
separator Exp "," ;
separator nonempty String "" ;
separator nonempty Id "::" ;

comment "//" ;
comment "/*" "*/" ;
comment "#" ;